{"version":3,"sources":["components/TodoItem.js","components/TodoList.js","components/NewTodo.js","components/TodosFilter.js","App.js","index.js"],"names":["TodoItem","state","isEdit","handleStartEdit","setState","handleFinishEdit","e","id","value","target","key","type","props","editTodo","this","completed","onItemClick","deleteItem","classItem","cn","editing","className","onChange","checked","htmlFor","onDoubleClick","onClick","defaultValue","handleEditValue","onBlur","onKeyDown","autoFocus","Component","TodoList","todos","map","todo","NewTodo","handleInputChange","handleSubmitNewTodo","preventDefault","addNewTodo","onSubmit","placeholder","TodosFilter","buttons","name","label","clickFilter","filter","href","todosArr","App","trim","newTodo","Date","getTime","changeCompleted","handleToogleAll","idx","findIndex","slice","clearCompleted","filterStatus","remainTask","length","visibleItem","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f27ff54e.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport cn from 'classnames';\n\nexport default class TodoItem extends Component {\n  state = {\n    isEdit: false,\n  }\n\n  handleStartEdit = () => {\n    this.setState({\n      isEdit: true,\n    });\n  }\n\n  handleFinishEdit = (e, id) => {\n    const { value } = e.target;\n\n    if (e.key !== 'Enter' && e.type !== 'blur') {\n      return;\n    }\n\n    this.setState({\n      isEdit: false,\n    });\n    this.props.editTodo(value, id);\n  }\n\n  render() {\n    const { id, completed, value, onItemClick, deleteItem } = this.props;\n    const { isEdit } = this.state;\n    const classItem = cn({ completed }, { editing: isEdit });\n\n    return (\n      <li className={classItem}>\n        <div className=\"view\">\n          <input\n            onChange={(e) => {\n              onItemClick(id);\n            }}\n            type=\"checkbox\"\n            className=\"toggle\"\n            checked={!!completed}\n            id={id}\n          />\n          <label\n            htmlFor={id}\n            onDoubleClick={this.handleStartEdit}\n          >\n            {' '}\n            {value}\n            {' '}\n\n          </label>\n          <button\n            onClick={(e) => {\n              deleteItem(id);\n            }}\n            type=\"button\"\n            className=\"destroy\"\n          />\n        </div>\n        {isEdit && (\n          <input\n            defaultValue={value}\n            onChange={this.handleEditValue}\n            onBlur={e => this.handleFinishEdit(e, id)}\n            onKeyDown={e => this.handleFinishEdit(e, id)}\n            type=\"text\"\n            className=\"edit\"\n            /* eslint-disable jsx-a11y/no-autofocus */\n            autoFocus\n          />\n        )}\n      </li>\n\n    );\n  }\n}\n\nTodoItem.propTypes = {\n  editTodo: PropTypes.func.isRequired,\n  id: PropTypes.string.isRequired,\n  completed: PropTypes.bool.isRequired,\n  value: PropTypes.string.isRequired,\n  onItemClick: PropTypes.func.isRequired,\n  deleteItem: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport TodoItem from './TodoItem';\n\nconst TodoList = ({ editTodo, todos, onItemClick, deleteItem }) => (\n  <ul className=\"todo-list\">\n    {todos.map(todo => (\n      <TodoItem\n        editTodo={editTodo}\n        onItemClick={onItemClick}\n        deleteItem={deleteItem}\n        key={todo.id}\n        {...todo}\n      />\n    ))}\n  </ul>\n);\n\nTodoList.propTypes = {\n  editTodo: PropTypes.func.isRequired,\n  todos: PropTypes.arrayOf.isRequired,\n  onItemClick: PropTypes.func.isRequired,\n  deleteItem: PropTypes.func.isRequired,\n};\n\nexport default TodoList;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass NewTodo extends Component {\n  state = {\n    value: '',\n  }\n\n  handleInputChange = (e) => {\n    this.setState({\n      value: e.target.value,\n    });\n  }\n\n  handleSubmitNewTodo = (e) => {\n    e.preventDefault();\n    this.props.addNewTodo(this.state.value);\n    this.setState({\n      value: '',\n    });\n  }\n\n  render() {\n    const { value } = this.state;\n\n    return (\n      <form onSubmit={this.handleSubmitNewTodo}>\n        <input\n          value={value}\n          onChange={this.handleInputChange}\n          className=\"new-todo\"\n          placeholder=\"What needs to be done?\"\n        />\n      </form>\n    );\n  }\n}\n\nNewTodo.propTypes = {\n  addNewTodo: PropTypes.func.isRequired,\n};\n\nexport default NewTodo;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass TodosFilter extends Component {\n  buttons = [\n    {\n      name: 'all', label: 'All',\n    },\n    {\n      name: 'active', label: 'Active',\n    },\n    {\n      name: 'completed', label: 'Completed',\n    },\n  ]\n\n  clickFilter = (e) => {\n    e.preventDefault();\n    this.props.clickFilter(e.target.name);\n  }\n\n  render() {\n    const { filter } = this.props;\n\n    return (\n      <ul className=\"filters\">\n        {this.buttons.map(({ name, label }) => (\n          <li key={name}>\n            <a\n              href={`#${name}`}\n              name={name}\n              className={filter === name ? 'selected' : null}\n              onClick={this.clickFilter}\n            >\n              {label}\n            </a>\n          </li>\n        ))\n        }\n      </ul>\n    );\n  }\n}\n\nTodosFilter.propTypes = {\n  clickFilter: PropTypes.func.isRequired,\n  filter: PropTypes.string.isRequired,\n};\n\nexport default TodosFilter;\n","import React, { Component } from 'react';\n\nimport TodoList from './components/TodoList';\nimport NewTodo from './components/NewTodo';\nimport TodosFilter from './components/TodosFilter';\n\nconst todosArr = [];\n\nclass App extends Component {\n  state = {\n    todos: todosArr,\n    filter: 'all',\n  }\n\n  addNewTodo = (value) => {\n    if (!value.trim()) {\n      return;\n    }\n\n    const newTodo = {\n      completed: false,\n      id: `todo-${new Date().getTime()}`,\n      value,\n    };\n\n    this.setState(state => ({\n      todos: [\n        ...state.todos, newTodo,\n      ],\n    }));\n  }\n\n  changeCompleted = (id) => {\n    this.setState(state => ({\n      todos: state.todos.map((todo) => {\n        if (todo.id === id) {\n          return {\n            ...todo,\n            completed: !todo.completed,\n          };\n        }\n\n        return todo;\n      }),\n    }));\n  }\n\n  handleToogleAll = (e) => {\n    const { checked } = e.target;\n\n    this.setState(state => ({\n      todos: state.todos.map(todo => ({\n        ...todo,\n        completed: !!checked,\n      })),\n    }));\n  }\n\n  deleteItem = (id) => {\n    this.setState(({ todos }) => {\n      const idx = todos.findIndex(todo => todo.id === id);\n      const newTodos = [\n        ...todos.slice(0, idx),\n        ...todos.slice(idx + 1),\n      ];\n\n      return {\n        todos: newTodos,\n      };\n    });\n  }\n\n  clearCompleted = () => {\n    this.setState(({ todos }) => {\n      const clearCompleted = todos.filter(todo => todo.completed === false);\n\n      return {\n        todos: clearCompleted,\n      };\n    });\n  }\n\n  clickFilter = (name) => {\n    this.setState({\n      filter: name,\n    });\n  }\n\n  editTodo = (value, id) => {\n    if (!value.trim()) {\n      return;\n    }\n\n    this.setState(state => ({\n      todos: state.todos.map((todo) => {\n        if (todo.id === id) {\n          return {\n            ...todo,\n            value,\n          };\n        }\n\n        return todo;\n      }),\n    }));\n  }\n\n  filterStatus = (todos, filter) => {\n    switch (filter) {\n      case 'all':\n        return todos;\n      case 'active':\n        return todos.filter(todo => todo.completed === false);\n      case 'completed':\n        return todos.filter(todo => todo.completed === true);\n      default:\n        return todos;\n    }\n  }\n\n  render() {\n    const { todos, filter } = this.state;\n    const remainTask = todos.filter(todo => todo.completed === false).length;\n    const visibleItem = this.filterStatus(todos, filter);\n\n    return (\n      <section className=\"todoapp\">\n        <header className=\"header\">\n          <h1>todos</h1>\n          <NewTodo addNewTodo={this.addNewTodo} />\n        </header>\n\n        <section className=\"main\">\n          <input\n            onChange={this.handleToogleAll}\n            type=\"checkbox\"\n            id=\"toggle-all\"\n            checked={remainTask === 0}\n            className=\"toggle-all\"\n          />\n          <label htmlFor=\"toggle-all\">Mark all as complete</label>\n          <TodoList\n            onItemClick={this.changeCompleted}\n            deleteItem={this.deleteItem}\n            editTodo={this.editTodo}\n            todos={visibleItem}\n          />\n        </section>\n\n        <footer className=\"footer\">\n          <span className=\"todo-count\">\n            {remainTask}\n            {' '}\n            items left\n          </span>\n          <TodosFilter clickFilter={this.clickFilter} filter={filter} />\n\n          <button\n            type=\"button\"\n            onClick={this.clearCompleted}\n            className=\"clear-completed\"\n          >\n            Clear completed\n          </button>\n        </footer>\n      </section>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}